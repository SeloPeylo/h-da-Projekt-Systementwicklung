<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Red Ball Detection" id="1" localization="8" tooltip="" x="96" y="250">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[def getxStatus(xt,xold):
    if xt<xold:


        return 1
    elif xt>xold:

        return 2



class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onLoad(self):
        #put initialization code here
        self.motion=self.session().service( "ALMotion" )
        self.posture=self.session().service( "ALRobotPosture" )
        self.tracker=self.session().service( "ALTracker" )
        self.tts=self.session().service( "ALTextToSpeech" )
        self.alife=self.session().service( "ALAutonomousLife" )

        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.motion.wakeUp()
        self.alife.setState("disabled")


        self.tracker.stopTracker()
        self.tracker.unregisterAllTargets()
        self.tracker.toggleSearch(False)

        self.tts.say("Red Ball Detector started")
        self.fractionMaxSpeed = 0.8
        # Go to posture stand
        self.posture.goToPosture("StandInit", self.fractionMaxSpeed)

        # Add target to track.
        self.targetName = "RedBall"
        self.diameterOfBall = 0.06
        self.tracker.registerTarget(self.targetName, self.diameterOfBall)
         # set modes
        self.mode = "Head"
        self.tracker.setMode(self.mode)
        # Then, start tracker.
        self.tracker.track(self.targetName)


        self.hasTarget = None
        self.x=0
        while True:
                #Cordinates in variables

                if self.tracker.isNewTargetDetected():
                    self.tracker.pointAt("LArm",self.tracker.getTargetPosition(0), 0, 0.8)

                    self.postion=self.tracker.getTargetPosition(0)

                    if self.x!=0:

                        if self.postion[1]<self.x :
                            self.tts.say("Right")
                        elif self.postion[1]>self.x:
                               self.tts.say("Left")

                        self.x=self.postion[1]
                if self.tracker.isNewTargetDetected() and self.hasTarget == None:
                    self.tts.say("I have detected a red ball")
                    self.tracker.pointAt("LArm", self.tracker.getTargetPosition(0), 0, 0.8)
                    self.x=self.postion[1]



                    self.posture.goToPosture("StandInit", self.fractionMaxSpeed)
                    self.hasTarget = True


                if  self.tracker.isTargetLost() and self.hasTarget == True:
                    self.tts.say("I have lost my Target!")
                    self.hasTarget = None

                    self.time.sleep(0.5)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
